package ${package}.adminapi.web.${moduleName};

#if(${generateType} == 'boot')
import cc.uncarbon.framework.core.constant.HelioConstant;
import cc.uncarbon.framework.core.page.PageParam;
import cc.uncarbon.framework.core.page.PageResult;
import cc.uncarbon.framework.web.model.request.IdsDTO;
import cc.uncarbon.framework.web.model.response.ApiResult;
import ${package}.adminapi.constant.AdminApiConstant;
import ${package}.adminapi.util.AdminStpUtil;
import ${package}.${moduleName}.model.request.Admin${className}InsertOrUpdateDTO;
import ${package}.${moduleName}.model.request.Admin${className}ListDTO;
import ${package}.${moduleName}.model.response.${className}BO;
import ${package}.${moduleName}.service.${className}Service;
import cn.dev33.satoken.annotation.SaCheckLogin;
import cn.dev33.satoken.annotation.SaCheckPermission;
#if(${helioFrameworkVersion} == 'v2')
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.Operation;
import jakarta.validation.Valid;
#end
#if(${helioFrameworkVersion} == 'v1')
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import javax.validation.Valid;
#end
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.web.bind.annotation.*;
#end
#if(${generateType} == 'cloud')
import cc.uncarbon.framework.core.constant.HelioConstant;
import cc.uncarbon.framework.core.page.PageParam;
import cc.uncarbon.framework.core.page.PageResult;
import cc.uncarbon.framework.web.model.request.IdsDTO;
import cc.uncarbon.framework.web.model.response.ApiResult;
import ${package}.adminapi.util.AdminStpUtil;
import ${package}.${moduleName}.facade.${className}Facade;
import ${package}.${moduleName}.model.request.Admin${className}InsertOrUpdateDTO;
import ${package}.${moduleName}.model.request.Admin${className}ListDTO;
import ${package}.${moduleName}.model.response.${className}BO;
import cn.dev33.satoken.annotation.SaCheckLogin;
import cn.dev33.satoken.annotation.SaCheckPermission;
#if(${helioFrameworkVersion} == 'v2')
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.Operation;
import jakarta.validation.Valid;
#end
#if(${helioFrameworkVersion} == 'v1')
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import javax.validation.Valid;
#end
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.apache.dubbo.config.annotation.DubboReference;
import org.springframework.web.bind.annotation.*;
#end


/**
 * 后台管理-${comments}管理接口
 */
@SaCheckLogin(type = AdminStpUtil.TYPE)
#if(${helioFrameworkVersion} == 'v2')
@Tag(name = "${comments}管理接口")
#end
#if(${helioFrameworkVersion} == 'v1')
@Api(value = "${comments}管理接口", tags = {"${comments}管理接口"})
#end
#if(${generateType} == 'boot')
@RequestMapping(AdminApiConstant.HTTP_API_URL_PREFIX + "/api/v1")
#end
#if(${generateType} == 'cloud')
@RequestMapping("/api/v1")
#end
@RequiredArgsConstructor
@RestController
@Slf4j
public class Admin${className}Controller {

    // 功能权限串前缀
    private static final String PERMISSION_PREFIX = "${className}:";

#if(${generateType} == 'boot')
    private final ${className}Service ${classname}Service;
#end
#if(${generateType} == 'boot-multi')
    private final ${className}Facade ${classname}Facade;
#end
#if(${generateType} == 'cloud')
    @DubboReference(version = HelioConstant.Version.DUBBO_VERSION_V1, validation = HelioConstant.Dubbo.ENABLE_VALIDATION)
    private ${className}Facade ${classname}Facade;
#end


    @SaCheckPermission(type = AdminStpUtil.TYPE, value = PERMISSION_PREFIX + HelioConstant.Permission.RETRIEVE)
#if(${helioFrameworkVersion} == 'v2')
    @Operation(summary = "分页列表")
#end
#if(${helioFrameworkVersion} == 'v1')
    @ApiOperation(value = "分页列表")
#end
    @GetMapping("/${kebabCaseClassName}s")
    public ApiResult<PageResult<${className}BO>> list(PageParam pageParam, Admin${className}ListDTO dto) {
#if(${generateType} == 'boot')
        return ApiResult.data(${classname}Service.adminList(pageParam, dto));
#end
#if(${generateType} == 'cloud')
        return ApiResult.data(${classname}Facade.adminList(pageParam, dto));
#end
    }

    @SaCheckPermission(type = AdminStpUtil.TYPE, value = PERMISSION_PREFIX + HelioConstant.Permission.RETRIEVE)
#if(${helioFrameworkVersion} == 'v2')
    @Operation(summary = "详情")
#end
#if(${helioFrameworkVersion} == 'v1')
    @ApiOperation(value = "详情")
#end
    @GetMapping(value = "/${kebabCaseClassName}s/{id}")
    public ApiResult<${className}BO> getById(@PathVariable Long id) {
#if(${generateType} == 'boot')
        return ApiResult.data(${classname}Service.getOneById(id, true));
#end
#if(${generateType} == 'cloud')
        return ApiResult.data(${classname}Facade.getOneById(id, true));
#end
    }

    @SaCheckPermission(type = AdminStpUtil.TYPE, value = PERMISSION_PREFIX + HelioConstant.Permission.CREATE)
#if(${helioFrameworkVersion} == 'v2')
    @Operation(summary = "新增")
#end
#if(${helioFrameworkVersion} == 'v1')
    @ApiOperation(value = "新增")
#end
    @PostMapping("/${kebabCaseClassName}s")
    public ApiResult<Void> insert(@RequestBody @Valid Admin${className}InsertOrUpdateDTO dto) {
#if(${generateType} == 'boot')
        ${classname}Service.adminInsert(dto);
#end
#if(${generateType} == 'cloud')
        ${classname}Facade.adminInsert(dto);
#end
        return ApiResult.success();
    }

    @SaCheckPermission(type = AdminStpUtil.TYPE, value = PERMISSION_PREFIX + HelioConstant.Permission.UPDATE)
#if(${helioFrameworkVersion} == 'v2')
    @Operation(summary = "编辑")
#end
#if(${helioFrameworkVersion} == 'v1')
    @ApiOperation(value = "编辑")
#end
    @PutMapping(value = "/${kebabCaseClassName}s/{id}")
    public ApiResult<Void> update(@PathVariable Long id, @RequestBody @Valid Admin${className}InsertOrUpdateDTO dto) {
        dto.setId(id);
#if(${generateType} == 'boot')
        ${classname}Service.adminUpdate(dto);
#end
#if(${generateType} == 'cloud')
        ${classname}Facade.adminUpdate(dto);
#end
        return ApiResult.success();
    }

    @SaCheckPermission(type = AdminStpUtil.TYPE, value = PERMISSION_PREFIX + HelioConstant.Permission.DELETE)
#if(${helioFrameworkVersion} == 'v2')
    @Operation(summary = "删除")
#end
#if(${helioFrameworkVersion} == 'v1')
    @ApiOperation(value = "删除")
#end
    @DeleteMapping("/${kebabCaseClassName}s")
    public ApiResult<Void> delete(@RequestBody @Valid IdsDTO<Long> dto) {
#if(${generateType} == 'boot')
        ${classname}Service.adminDelete(dto.getIds());
#end
#if(${generateType} == 'cloud')
        ${classname}Facade.adminDelete(dto.getIds());
#end
        return ApiResult.success();
    }

}
