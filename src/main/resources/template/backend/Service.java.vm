package ${package}.${moduleName}.service.impl;

import cc.uncarbon.framework.core.constant.HelioConstant;
import cc.uncarbon.framework.core.exception.BusinessException;
import cc.uncarbon.framework.core.page.PageParam;
import cc.uncarbon.framework.core.page.PageResult;
import cc.uncarbon.framework.crud.service.impl.HelioBaseServiceImpl;
import ${package}.sys.annotation.SysLog;
import ${package}.sys.enums.SysErrorEnum;
import ${package}.${moduleName}.entity.${className}Entity;
import ${package}.${moduleName}.mapper.${className}Mapper;
import ${package}.${moduleName}.model.request.AdminInsertOrUpdate${className}DTO;
import ${package}.${moduleName}.model.request.AdminList${className}DTO;
import ${package}.${moduleName}.model.response.${className}BO;
import cn.hutool.core.bean.BeanUtil;
import cn.hutool.core.util.StrUtil;
import cn.hutool.core.util.ObjectUtil;
import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.List;


/**
 * ${comments}
 *
 * @author ${author}
 */
@Slf4j
@Service
@RequiredArgsConstructor
public class ${className}Service extends HelioBaseServiceImpl<${className}Mapper, ${className}Entity> {

    /**
     * 后台管理-分页列表
     */
    public PageResult<${className}BO> adminList(PageParam pageParam, AdminList${className}DTO dto) {
        Page<${className}Entity> entityPage = this.page(
                new Page<>(pageParam.getPageNum(), pageParam.getPageSize()),
                new QueryWrapper<${className}Entity>()
                        .lambda()
#foreach ($column in $columns)
#if($column.columnName != $pk.columnName
&& $column.columnName != "tenant_id"
&& $column.columnName != "revision"
&& $column.columnName != "del_flag"
&& $column.columnName != "created_at"
&& $column.columnName != "created_by"
&& $column.columnName != "updated_at"
&& $column.columnName != "updated_by"
)
                        // $column.comments
#if($column.attrType == 'String')
                        .like(StrUtil.isNotBlank(dto.get${column.pascalAttrName}()), ${className}Entity::get$column.pascalAttrName, StrUtil.cleanBlank(dto.get${column.pascalAttrName}()))
#else
                        .eq(ObjectUtil.isNotNull(dto.get${column.pascalAttrName}()), ${className}Entity::get$column.pascalAttrName, dto.get${column.pascalAttrName}())
#end
#end
#end
                        // 时间区间
                        .between(ObjectUtil.isNotNull(dto.getBeginAt()) && ObjectUtil.isNotNull(dto.getEndAt()), ${className}Entity::getCreatedAt, dto.getBeginAt(), dto.getEndAt())
                        // 排序
                        .orderByDesc(${className}Entity::getCreatedAt)
        );

        return this.entityPage2BOPage(entityPage);
    }

    /**
     * 根据 ID 取详情
     *
     * @param id 主键ID
     * @return null or BO
     */
    public ${className}BO getOneById(Long id) {
        return this.getOneById(id, false);
    }

    /**
     * 根据 ID 取详情
     *
     * @param id 主键ID
     * @param throwIfInvalidId 是否在 ID 无效时抛出异常
     * @return null or BO
     */
    public ${className}BO getOneById(Long id, boolean throwIfInvalidId) throws BusinessException {
        ${className}Entity entity = this.getById(id);
        if (throwIfInvalidId) {
            SysErrorEnum.INVALID_ID.assertNotNull(entity);
        }

        return this.entity2BO(entity);
    }

    /**
     * 后台管理-新增
     */
    @SysLog(value = "新增${comments}")
    @Transactional(rollbackFor = Exception.class)
    public Long adminInsert(AdminInsertOrUpdate${className}DTO dto) {
        log.info("[后台管理-新增${comments}] >> DTO={}", dto);
        this.checkExistence(dto);

        dto.setId(null);
        ${className}Entity entity = new ${className}Entity();
        BeanUtil.copyProperties(dto, entity);

        this.save(entity);

        return entity.getId();
    }

    /**
     * 后台管理-编辑
     */
    @SysLog(value = "编辑${comments}")
    @Transactional(rollbackFor = Exception.class)
    public void adminUpdate(AdminInsertOrUpdate${className}DTO dto) {
        log.info("[后台管理-编辑${comments}] >> DTO={}", dto);
        this.checkExistence(dto);

        ${className}Entity entity = new ${className}Entity();
        BeanUtil.copyProperties(dto, entity);

        this.updateById(entity);
    }

    /**
     * 后台管理-删除
     */
    @SysLog(value = "删除${comments}")
    @Transactional(rollbackFor = Exception.class)
    public void adminDelete(Collection<Long> ids) {
        log.info("[后台管理-删除${comments}] >> ids={}", ids);
        this.removeByIds(ids);
    }


    /*
    ----------------------------------------------------------------
                        私有方法 private methods
    ----------------------------------------------------------------
     */

    /**
     * 实体转 BO
     *
     * @param entity 实体
     * @return BO
     */
    private ${className}BO entity2BO(${className}Entity entity) {
        if (entity == null) {
            return null;
        }

        ${className}BO bo = new ${className}BO();
        BeanUtil.copyProperties(entity, bo);

        // 可以在此处为BO填充字段

        return bo;
    }

    /**
     * 实体 List 转 BO List
     *
     * @param entityList 实体 List
     * @return BO List
     */
    private List<${className}BO> entityList2BOs(List<${className}Entity> entityList) {
        if (CollUtil.isEmpty(entityList)) {
            return Collections.emptyList();
        }

        // 深拷贝
        List<${className}BO> ret = new ArrayList<>(entityList.size());
        entityList.forEach(
            entity -> ret.add(this.entity2BO(entity))
        );

        return ret;
    }

    /**
     * 实体分页转 BO 分页
     *
     * @param entityPage 实体分页
     * @return BO 分页
     */
    private PageResult<${className}BO> entityPage2BOPage(Page<${className}Entity> entityPage) {
        PageResult<${className}BO> ret = new PageResult<>();
        BeanUtil.copyProperties(entityPage, ret);
        ret.setRecords(this.entityList2BOs(entityPage.getRecords()));

        return ret;
    }

    /**
     * 检查是否已存在同名数据
     *
     * @param dto DTO
     */
    private void checkExistence(AdminInsertOrUpdate${className}DTO dto) {
        /*
        可以根据自己业务需要，解禁这段代码，修改判断条件和文案

        ${className}Entity existingEntity = this.getOne(
                new QueryWrapper<${className}Entity>()
                        .lambda()
                        .select(${className}Entity::getId)
                        .eq(${className}Entity::getTitle, dto.getTitle())
                        .last(HelioConstant.CRUD.SQL_LIMIT_1)
        );

        if (existingEntity != null && !existingEntity.getId().equals(dto.getId())) {
            throw new BusinessException(400, "已存在相同${comments}，请重新输入");
        }
        */
    }

}
